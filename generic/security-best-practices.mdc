---
description: 
globs: 
alwaysApply: false
---
# Security Best Practices

## Input Validation

### Never Trust User Input
- Validate all input at system boundaries
- Apply both client-side and server-side validation
- Implement strict input type checking
- Use allowlists rather than blocklists

### Input Sanitization
- Sanitize user input before using it in queries
- Remove or encode potentially dangerous characters
- Use parameterized queries for databases
- Apply context-appropriate escaping

### Content Security
- Implement Content Security Policy (CSP)
- Validate uploaded files (type, size, content)
- Store uploaded files outside web root
- Scan uploads for malware

## Authentication and Authorization

### Authentication Best Practices
- Enforce strong password policies
- Implement multi-factor authentication
- Use secure password storage (salted hashing)
- Lock accounts after failed attempts
- Implement secure password recovery

### Session Management
- Generate strong session IDs
- Rotate session IDs after login
- Set secure and HttpOnly cookie flags
- Implement absolute and idle session timeouts
- Invalidate sessions on logout

### Authorization Controls
- Implement principle of least privilege
- Use role-based access control (RBAC)
- Verify authorization on every request
- Don't rely on client-side authorization
- Implement proper access control checks

## Data Protection

### Sensitive Data Handling
- Classify data by sensitivity level
- Apply encryption appropriate to sensitivity
- Minimize collection of sensitive data
- Implement data minimization principles
- Delete sensitive data when no longer needed

### Encryption Practices
- Use modern, standardized algorithms
- Manage keys securely
- Implement proper key rotation
- Use TLS for all communications
- Encrypt data at rest and in transit

### Secrets Management
- Never hardcode secrets in source code
- Store secrets in secure vaults or services
- Rotate secrets regularly
- Use environment variables or config files
- Implement proper access controls for secrets

## Security Headers and Configurations

### HTTP Security Headers
- X-Content-Type-Options: nosniff
- X-Frame-Options: DENY/SAMEORIGIN
- Strict-Transport-Security (HSTS)
- X-XSS-Protection: 1; mode=block
- Content-Security-Policy (CSP)

### Application Configuration
- Remove debug and development features in production
- Disable directory listings
- Set appropriate file permissions
- Use secure defaults
- Return minimal error information to clients

### Server Hardening 
- Keep systems and libraries updated
- Run services with least privileges
- Disable unnecessary services
- Configure appropriate resource limits
- Implement proper firewall rules

## Secure Coding Practices

### OWASP Top 10 Prevention
- Prevent injection (SQL, NoSQL, OS command)
- Avoid broken authentication
- Protect sensitive data
- Validate and sanitize XML
- Implement proper access control

### Code Review for Security
- Conduct security-focused code reviews
- Use static analysis security tools (SAST)
- Implement peer review for security critical code
- Verify security controls during review
- Check for insecure uses of libraries

### Secure Dependencies
- Use only necessary dependencies
- Keep dependencies updated
- Scan dependencies for vulnerabilities
- Pin dependency versions
- Have a process for security updates

## Security Testing

### Security Testing Methods
- Implement security unit tests
- Conduct regular penetration testing
- Use dynamic application security testing (DAST)
- Perform automated scanning
- Test for common vulnerabilities

### Common Test Cases
- Authentication bypass attempts
- Privilege escalation attacks
- Input validation bypasses
- Session handling weaknesses
- File upload vulnerabilities

### Security Regression Testing
- Include security tests in CI/CD
- Automatically scan new code for vulnerabilities
- Verify fixed vulnerabilities don't return
- Test security headers and configurations
- Validate encryption implementations

## Incident Response

### Security Logging
- Log security-relevant events
- Include necessary context in logs
- Protect logs from tampering
- Implement centralized logging
- Set appropriate log retention periods

### Breach Detection
- Monitor for suspicious activity
- Set up alerts for security events
- Implement intrusion detection
- Monitor for data exfiltration
- Check for unauthorized access

### Incident Handling
- Have a documented incident response plan
- Define roles and responsibilities
- Implement communication procedures
- Document evidence collection methods
- Practice incident response scenarios